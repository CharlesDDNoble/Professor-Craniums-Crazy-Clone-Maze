pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
-- main loops
-- player/physics globals
grav = {}
player = {}
clone = {}
has_clone = false
player_starts = {}
music_pat = {}
level = 0
old_level = 0
frames = 0

-- background objects
bg_objects = {}
bg_cnt = 1

-- pressure plates
plt1 = {}
plt2 = {}
plt3 = {}

-- turrets
turrets = {}
bullets = {}

-- sprite flags
-- 0 == floor
-- 1 == left wall
-- 2 == right wall
-- 3 == obstacle
-- 4 == platform
-- 5 == cloner
-- 6 == tp_pad

-- sfx numbers
-- 55 == turret shot
-- 59/60 == btn_press
-- 61 == ???
-- 62 == jump
-- 63 == death

-- music numbers
-- intro   == 4-7
-- level_1 == 8-11

-- todo:
-- 	i. finish level 3
--  1. add x-range conditions
--				 for turret shot
--		2. add dist(v1,v2) function
--  3. 3 more levels
--  4. splash screen
--  5. 3 more songs
--  6. vicory screen -> splash screen
--  7. door-plate mechanic

-- title
title_drops = {}
title_cnt = 20
menu_item = 0
max_controls_time = 600
controls_time = 0
has_won = false
colors = 0

function make_drop(sprt)
		x = rnd(120)
		y = -rnd(240)
		pos = make_vector(x,y)
		return make_object(pos,sprt,0,0,true)		
end

function init_title()
	music(1)
	
	for i = 1, title_cnt, 1 do
		title_drops[i] = make_drop(59)
	end
end

function _init()
	grav = make_vector(0,.175)
 player_starts[0] = make_vector(0,0)
 player_starts[1] = make_vector(1*8,7*8)
 player_starts[2] = make_vector(1*8,16*8)
 player_starts[3] = make_vector(1*8,24*8)
 player_starts[4] = make_vector(79*8,25*8)

	music_pat[0] = 1
	music_pat[1] = 5
	music_pat[2] = 0
	music_pat[3] = 5

 init_level_1()
 init_level_2()
 init_level_3()
 init_title()
end

function update_title()
	-- start
	-- game controls

	-- menu controls
	if btnp(2) then
		menu_item -= 1
	elseif btnp(3) then
		menu_item += 1
	end
	
	if menu_item > 1 then
		menu_item = 0
	elseif menu_item < 0 then
		menu_item = 1
	end

	-- handle menu_item press
	if btnp(5) then
		-- start_game
		if menu_item == 0 then
			level += 1
			has_won = false
			player = make_player(player_starts[level])
		elseif menu_item == 1 then
			controls_time = max_controls_time
		end
	end

	-- drop physics on drops
	for i = 1, title_cnt, 1 do
		drop = title_drops[i]
		apply_force(drop,grav)
		update_object(drop)
		if drop.pos.y > 150 then
			drop.pos.y = -rnd(60)
		end
	end
end

function update_game()

-- do not change vvvv
	player = update_player(player)
	apply_force(player,grav)

		-- player camera
	if player.pos != nil then
		cam_x = player.pos.x-48+4
		camera(cam_x,(level-1)*8*7)
	else
		return
	end
	
	if has_clone then
		update_clone(clone)
		apply_force(clone,grav)
	end

	for i = 1, bg_cnt-1, 1 do
		update_bg_object(bg_objects[i])
	end
	-- do not change ^^^^^
	
	-- level specific updates
	update_level_1()
	update_level_2()
	update_level_3()
end

function _update60()
	-- handle change level
	if old_level != level then
		music(music_pat[level])
		old_level = level
	end
	
	if	level > 3 then
		level = 0
		has_won = true
	end
	
	-- level select
	if level == 0 then
		update_title()
	elseif not has_won then
		if player.pos == nil then
			player = make_player(player_starts[level])
		end
		update_game()
	end
	
	frames += 1
	frames %= 1000
end

function draw_title()
		cls()
		camera(0,0)
		rectfill(0,0,128,128,0)
		rect(0,0,127,127,7)
		-- drops
		foreach(title_drops,draw_object)
		
		print("professor cranium's crazy",10,20,8)
		print("clone maze",40,28,8)
		
		-- menu_item highlight
		if menu_item == 0 then
			rectfill(48,78,70,86,10)
		elseif menu_item == 1 then
			rectfill(42,90,76,98,10)	
		else -- default
			rectfill(48,78,70,86,10)
		end
		
		print("start",50,80,8)
		print("controls",44,92,8)
		
		-- display victory!
		if has_won then
		 print("victory",46,52,10)
		 print("congratulations!",30,62,colors)
			if frames % 5 == 0 then
				colors += 1
				colors %= 15
				colors += 1
				drop_sprt = {}
				drop_sprt[0] = 94
				drop_sprt[1] = 95
				drop_sprt[2] = 110
				drop_sprt[3] = 111
				drop_sprt[4] = 126
				drop_sprt[5] = 127
				drop_sprt[6] = 94
				drop_sprt[7] = 95
				drop_sprt[8] = 94
				drop_sprt[9] = 95
				
				if title_cnt < 100 then
					title_cnt += 1
					title_drops[title_cnt] = make_drop(drop_sprt[flr(rnd(10))])
				end
			end
			
		end
		
		-- print controls
		if controls_time > 0 then
			print("plyr move = arrow keys",20,52,11)
			print("interact = c",20,62,11)
			print("clone move = e,s,d,f",20,72,11)
			controls_time -= 1
		end	
end

function draw_game()
	-- background
	cls()
	map(0,0,0,0)
	
	-- level specific drawing
	draw_level_1()
	draw_level_2()
	draw_level_3()
	
	-- do not change vvvv
	for i = 1, bg_cnt-1, 1 do
		draw_object(bg_objects[i])
	end

	if has_clone then
		draw_player(clone)
	end
	draw_player(player)
		-- do not change ^^^^^
end

function _draw()
	if level == 0 then
		draw_title()
	else
		draw_game()
	end
end

-->8
-- class vector

function make_vector(x,y)
	local v = {}
	v.x = x
	v.y = y
	return v
end

function copy_vector(vec)
	local v = {}
	v.x = vec.x
	v.y = vec.y
	return v	
end

function add_vector(v1,v2)
	return make_vector(v1.x + v2.x, v1.y + v2.y)
end

function mult_vector(val1,val2)
	local v = {}
	if (type(val1) == "number" and type(val2) == "number") then
		assert(false)
	elseif type(val1) == "number" then
		v = make_vector(val1 * val2.x, val1 * val2.y)
 elseif type(val2) == "number" then
	 v = make_vector(val2 * val1.x, val2 * val1.y)
 else
  v = make_vector(val1.x * val2.x, val1.y * val2.y)
	end
	return v
end

function neg_vector(vec)
	return mult_vector(vec,-1)
end

function abs_vector(vec)
	return make_vector(abs(vec.x),abs(vec.y))
end

function zero_vector()
	return make_vector(0,0)
end

function limit_vector(vec,min_vec,max_vec)
 v = copy_vector(vec)
	if v.x > max_vec.x then
		v.x = max_vec.x
	elseif v.x < min_vec.x then
		v.x = min_vec.x
	end
	if v.y > max_vec.y then
		v.y = max_vec.y
	elseif v.y < min_vec.y then
		v.y = min_vec.y
	end
	return v
end
-->8
-- class object
function make_object(pos,sprt,frames,ani_speed,no_collide)
	local obj = {}
	obj.pos = pos
	obj.vel = zero_vector()
	obj.acc = zero_vector()	
	obj.sprt = sprt
	obj.frame = 0
	obj.frames = frames
	obj.ani_speed = ani_speed
	obj.no_collide = false or no_collide
	return obj
end

function apply_force(obj,force)
	obj.acc = add_vector(obj.acc,force)
end

function update_object(obj)
	damp = make_vector(.95,.90)
	vel_max = make_vector(3,3)
	vel_min = make_vector(-3,-4)
	obj.vel = add_vector(obj.vel,obj.acc)
	has_collided = false
	

	//boxin bottom
	if (not obj.no_collide)
			and	(is_colliding_floor(obj)
	 					or is_colliding_platform(obj)) then
		obj.vel = limit_vector(obj.vel,make_vector(-99,-99),make_vector(99,-0.001)) 
	end
	
	//boxin top
	if (not obj.no_collide) and
	 is_colliding_t0p(obj) then
		obj.vel = limit_vector(obj.vel,make_vector(-99,0),make_vector(99,99)) 
	end
	
	//boxin sides
	if (not obj.no_collide) 
				and is_colliding_wall_left(obj) then
		obj.vel = limit_vector(obj.vel,make_vector(0.01,-99),make_vector(99,99))
		has_collided = true
	elseif (not obj.no_collide)
 and is_colliding_wall_right(obj) then
		obj.vel = limit_vector(obj.vel,make_vector(-99,-99),make_vector(-0.01,99))
		has_collided = true
	end

	-- update physics
	obj.vel = mult_vector(obj.vel,damp)
	obj.acc = zero_vector()
	obj.vel = limit_vector(obj.vel,vel_min,vel_max)
	obj.pos = add_vector(obj.pos,obj.vel)

	-- currently just a hack for the bullets
	return has_collided
end

function draw_object(obj)
	spr(obj.sprt + obj.frame,obj.pos.x,obj.pos.y)
end

-- bg_objects functions
function add_bg(obj)
	bg_objects[bg_cnt] = obj
	bg_cnt += 1
end

function clear_bg()
	for i = 1, bg_cnt-1, 1 do
		bg_objects[i] = nil
	end
	bg_cnt = 1
end

function update_bg_object(obj)
	obj.frame += obj.ani_speed
	if obj.frame > obj.frames then
		obj.frame = 0
	end
end

function draw_bg_object(obj)
	update_bg_object(obj)
	spr(obj.sprt + obj.frame,obj.pos.x,obj.pos.y)
end
//end of class object

//class player
function make_player(pos)
	p = make_object(pos,48,5,1/4)
	p.is_alive = true
	p.is_dying = false
	p.is_tping = false
	p.was_shot = false
	p.death_frame = 53
	p.death_end = 63
	p.tp_frame = 96
	p.tp_end = 107
	return p
end

function update_player(p)
	//obstacle collision
	if (is_colliding_obstacle(p) or p.was_shot) and p.is_alive then
		p.is_alive = false
		p.is_dying = true
		sfx(63)
	end
		
	//tp collision
	if p.is_alive and is_colliding_tp(p) and not p.is_tping then
		p.is_tping = true
		kill_clone(clone)
		sfx(56)
	end
	
	//player state
	if p.is_tping then
		p.tp_frame += .125
		if p.tp_frame > p.tp_end then
			-- level change
			level += 1
			return make_player(player_starts[level])
		end
	elseif p.is_alive then
		move_player(p)
		update_object(p)
	elseif p.is_dying then
		kill_clone(clone)
		p.death_frame += .125
		if p.death_frame > p.death_end then
			return make_player(player_starts[level])
		end
	end
	
	return p
end

function draw_player(p)
	if p.is_alive and p.is_tping then
		spr(p.tp_frame,p.pos.x,p.pos.y)
	elseif p.is_alive then
		draw_object(p)
	else
		spr(p.death_frame,p.pos.x,p.pos.y)
	end
end

function move_player(plyr)
	move_spd = make_vector(.07,0)
	jmp_spd = make_vector(0,-7)
	
	//left and right
	if btn(0) then
		apply_force(plyr,neg_vector(move_spd))
	 plyr.frame -= plyr.ani_speed
	elseif btn(1) then
		apply_force(plyr,move_spd)
		plyr.frame += plyr.ani_speed
	else
		plyr.frame = 0
	end
	
	//jump
	if btnp(2) and (is_colliding_floor(plyr) or is_colliding_platform(plyr)) then
		apply_force(plyr,jmp_spd)
		sfx(62)
	end

	//interact with object
	if btnp(4) and (is_colliding_cloner(plyr)) then
		if has_clone then
			sfx(58)
		else
			c_pos = copy_vector(plyr.pos)
			c_pos.x = flr(c_pos.x/8)*8
			c_pos.y = flr(c_pos.y/8)*8 - 8
			clone = make_clone(c_pos)
			sfx(57)
		end
	end
	
	//wrap frames for animation
	if plyr.frame >= plyr.frames then
		plyr.frame = 0
	elseif plyr.frame < 0 then
		plyr.frame = plyr.frames
	end

end
//end of class player


//class clone
function make_clone(pos)
	if not has_clone then
		c = make_object(pos,64,5,1/4)
		c.is_alive = true
		c.is_dying = false
		c.death_frame = 69
		c.death_end = 79
		has_clone = true
		return c
	else
		return false
	end
end


function move_clone(c)
	move_spd = make_vector(.07,0)
	jmp_spd = make_vector(0,-7)
	if btn(0,1) then
		apply_force(c,neg_vector(move_spd))
	 c.frame -= c.ani_speed
	elseif btn(1,1) then
		apply_force(c,move_spd)
		c.frame += c.ani_speed
	else
		c.frame = 0
	end
	
	//update frames for animation
	if c.frame >= c.frames then
		c.frame = 0
	elseif c.frame < 0 then
		c.frame = c.frames
	end
	
	if btnp(2,1)
		 and (is_colliding_floor(c) 
			or is_colliding_platform(c)) then
		apply_force(c,jmp_spd)
		sfx(62)
	end
end

function kill_clone(c)
	if has_clone then
		c.is_alive = false
		c.is_dying = true
		sfx(63)
	end
end

function update_clone(c)
	if is_colliding_obstacle(c) and c.is_alive then
		kill_clone(c)
	end
	
	if c.is_alive then
		move_clone(c)
		update_object(c)
	elseif c.is_dying then
		c.death_frame += .125
		if c.death_frame > c.death_end then
			has_clone = false
			return nil
		end
	end
	
	return c
end
//end of class clone


//class pressure plate
function make_press_event(start_func,end_func,max_frames)
	e = {}
	e.start_func = start_func
	e.end_func = end_func
	e.max_frames = max_frames
	e.frames_left = 0
	e.has_started = false
	return e
end

function clear_spikes(e)
	y1 = e.y1
	while (y1 <= e.y2) do
		temp = e.x1
		while (temp <= e.x2) do
			//if (fget(mget(e.x1,e.y1)) == 0x4) then
				mset(temp,y1,1)
			//end
			temp += 1
		end
	 y1 += 1
	end
end

function add_spikes(e)
	y1 = e.y1
	while (y1 <= e.y2) do
		temp = e.x1
		while (temp <= e.x2) do
			//if (fget(mget(e.x1,e.y1)) == 0x4) then
			mset(temp,y1,39)
			temp += 1
		end
	 y1 += 1
	end
end

function spike_event(x1,y1,x2,y2,frames)
	e = make_press_event(clear_spikes,add_spikes,frames)
	e.x1 = x1
	e.x2 = x2
	e.y1 = y1
	e.y2 = y2
	return e
end

function make_plate(pos,event)
	p = make_object(pos,14,0,0)
	p.event = event
	return p
end

function is_plate_pressed(plt)
	x = flr((player.pos.x+2)/8)
	y = flr((player.pos.y)/8)
	
	//player collision
	if  (x == flr(plt.pos.x/8) 
	and  y == flr(plt.pos.y/8))
	then
		return true
	end
	
	//clone collision
	if has_clone then
		x = flr((clone.pos.x+2)/8)
		y = flr((clone.pos.y)/8)
		if  (x == flr(plt.pos.x/8) 
		and  y == flr(plt.pos.y/8))
		then
			return true
		end
	end
	
	return false
end

function update_plate(plt)
	if is_plate_pressed(plt) and not plt.event.has_started then		
		sfx(59)
		plt.frame = 1
		plt.event.has_started = true
		plt.event.start_func(plt.event)
		plt.event.frames_left = plt.event.max_frames
	elseif is_plate_pressed(plt) and plt.event.has_started then
		plt.event.frames_left = plt.event.max_frames
	elseif plt.event.has_started then
		plt.event.frames_left -= 1
		if plt.event.frames_left <= 0 then
			plt.event.end_func(plt.event)
			plt.event.has_started = false
		end
	else
		plt.frame = 0
	end
end
//end of class pressure plate

//class bullet
function make_bullet(pos,spd)
	b = make_object(pos,117,7,.05)
	b.has_hit = false
	b.spd = spd
	b.hit_frame = 117
	b.hit_end = 124
	b.hit_ani_spd = .25
	return b
end

function update_bullet(b)
	x = (player.pos.x+4)/8
	y = (player.pos.y+4)/8
	bx = (b.pos.x+4)/8
	by = (b.pos.y+4)/8
	x2 = (bx-x)*(bx-x)+.5
	y2 = (by-y)*(by-y)
	
	-- check for collisions -- player
	if sqrt(x2+y2) <= 1 then
		b.has_hit = true
		player.was_shot= true
	end
	
	-- check for collisions -- clone
	if has_clone then
		x = (clone.pos.x+4)/8
		y = (clone.pos.y+4)/8
		x2 = (bx-x)*(bx-x)+.5
		y2 = (by-y)*(by-y)
		if abs( sqrt(x2+y2) ) <= 1 then
			b.has_hit = true
			kill_clone(clone)
		end
	end
	
	-- update object/hit animation
	if b.has_hit then
		b.hit_frame += b.hit_ani_spd
		if b.hit_frame > b.hit_end then
			del(bullets,b)
			return nil
		end
	else
		apply_force(b,b.spd)
		b.has_hit = update_object(b)
	end
	
	return b
end

function draw_bullet(b)
	if b.has_hit then
		spr(b.hit_frame,b.pos.x,b.pos.y)
	else
		draw_object(b)
	end	
end
//end of class bullet

//class turret
function make_turret(pos,rel_spd,rng)
	t = make_object(pos,82,4,.05)
	t.rel_spd = rel_spd
	t.rel = rel_spd
	t.rng = rng
	return t
end

function update_turret(t)
	bul_spd = make_vector(-.25,0)
	x = flr((player.pos.x+4)/8)
	y = flr((player.pos.y+4)/8)
	-- shoot conditions
	if t.rel <= 0 then
		if t.pos.y/8 == y and abs(x-t.pos.x/8) <= t.rng then
			//shoot bullet
			sfx(55)
			add(bullets,make_bullet(t.pos,bul_spd))
			t.rel = t.rel_spd
		elseif has_clone then
			x = flr((clone.pos.x+4)/8)
			y = flr((clone.pos.y+4)/8)
			if t.pos.y/8 == y and abs(x-t.pos.x/8) <= t.rng then
				//shoot bullet
				sfx(55)
				add(bullets,make_bullet(t.pos,bul_spd))
				t.rel = t.rel_spd
			end
		end
	else 
		t.rel -= 1
	end
end
//end of class turret

//class spike_ball
function make_spike_ball(pos)
	return make_object(pos,40,4,.05)
end
//end of class spike ball


//class vat
function make_vat(pos)
	return make_object(pos,44,4,.05)
end
//end of class vat

//class tp
function make_tp(pos)
	return make_object(pos,32,5,.05)
end
//end of class vat
-->8
-- object collision

function is_colliding_floor(obj)
	return ( band(fget(mget((obj.pos.x)/8,(obj.pos.y+8)/8)),0x1) == 0x1 )
end

function is_colliding_wall_left(obj)
	return ( band(fget(mget((obj.pos.x+6)/8,(obj.pos.y)/8)),0x2) == 0x2 )
end 

function is_colliding_wall_right(obj)
	return ( band(fget(mget((obj.pos.x)/8,(obj.pos.y)/8)),0x4) == 0x4 )
end 

function is_colliding_obstacle(obj)
	return ( band(fget(mget((obj.pos.x+4)/8,(obj.pos.y+4)/8)),0x8) == 0x8 )
end

function is_colliding_platform(obj)
	return ( band(fget(mget((obj.pos.x+4)/8,(obj.pos.y+3)/8)),0x10) == 0x10 )
end

function is_colliding_cloner(obj)
	return ( band(fget(mget((obj.pos.x+4)/8,(obj.pos.y+2)/8)),0x20) == 0x20 )
end

function is_colliding_tp(obj)
	return ( band(fget(mget((obj.pos.x+4)/8,(obj.pos.y+2)/8)),0x40) == 0x40 )
end

function is_colliding_t0p(obj)
	return ( band(fget(mget((obj.pos.x+4)/8,(obj.pos.y)/8)),0x80) == 0x80 )
end
-->8
-- debug functions
function print_info(obj)
 print("pos: ("..tostr(obj.pos.x)..","..tostr(obj.pos.y)..")", obj.pos.x-10, obj.pos.y - 6, 14)
 print("vel: ("..tostr(obj.vel.x)..","..tostr(obj.vel.y)..")", obj.pos.x-10, obj.pos.y - 12, 14)
 print("acc: ("..tostr(obj.acc.x)..","..tostr(obj.acc.y)..")", obj.pos.x-10, obj.pos.y - 18, 14)
	if is_colliding_obstacle(obj) or is_colliding_cloner(obj)
	then
		print("collision!",obj.pos.x,obj.pos.y + 8,11)
		print("flags: "..tostr(mget((obj.pos.x+4)/8,
			(obj.pos.y+8)/8)),
			obj.pos.x,
			obj.pos.y + 16,11)
	end
	px = flr((player.pos.x+2)/8)
	py = flr((player.pos.y)/8)
	x = flr((obj.pos.x)/8)
	y = flr((obj.pos.y)/8)
	print(x..","..y,obj.pos.x,obj.pos.y+24,11)
	print(px..","..py,obj.pos.x,obj.pos.y+32,11)
end

function print_plate_info(p)
	if is_plate_pressed(p) then
		print("pressed",p.pos.x,p.pos.y+24,11)
 	print("left: "..p.event.frames_left,p.pos.x,p.pos.y+48,11)
 else
 	print("not pressed",p.pos.x,p.pos.y+24,11)
		print("left: "..p.event.frames_left,p.pos.x,p.pos.y+48,11)
	end
	print_info(p)
end

function print_turret_info(t)
	print_info(t)
	print("rel: "..t.rel,t.pos.x,t.pos.y+16,11)
end

-->8
-- level 1
function init_level_1()
	music(5,0)

	--bg objects
	add_bg(make_vat(make_vector(65*8,7*8)))
	add_bg(make_spike_ball(make_vector(90,20)))
	add_bg(make_tp(make_vector(78*8,7*8)))
	
	plt_pos = make_vector(70*8,7*8)
	plt1 = make_plate(plt_pos,
		spike_event(
			plt_pos.x/8+1,
			plt_pos.y/8,
			plt_pos.x/8+5,
			plt_pos.y/8,
			20
		)
	)
end

function update_level_1()
	update_plate(plt1)
end

function draw_level_1()
	draw_object(plt1)
	print("press c",64*8,6*8,11)
end
-->8
-- level 2
function init_level_2()
	music(0,0)

	--bg objects
	add_bg(make_vat(make_vector(33*8,16*8)))
	add_bg(make_spike_ball(make_vector(90,20)))
	add_bg(make_tp(make_vector(78*8,16*8)))
	
	plt_pos = make_vector(71*8,16*8)
	plt2 = make_plate(plt_pos,
		spike_event(
			plt_pos.x/8+3,
			plt_pos.y/8,
			plt_pos.x/8+5,
			plt_pos.y/8,
			20
		)
	)
end

function update_level_2()
	update_plate(plt2)
end

function draw_level_2()
	draw_object(plt2)
end
-->8
-- level 3
function init_level_3()
	music(0,0)

	--bg objects
	add_bg(make_vat(make_vector(13*8,25*8)))
	add_bg(make_spike_ball(make_vector(160,20)))
	add_bg(make_tp(make_vector(78*8,25*8)))
	
	tur1 = make_turret(make_vector(44*8,25*8),180,32)
	add(turrets,tur1)
	tur2 = make_turret(make_vector(66*8,23*8),120,23)
	add(turrets,tur2)
	tur3 = make_turret(make_vector(67*8,24*8),240,23)
	add(turrets,tur3)
	
	plt_pos = make_vector(69*8,25*8)
	plt3 = make_plate(plt_pos,
		spike_event(
			plt_pos.x/8+3,
			plt_pos.y/8,
			plt_pos.x/8+5,
			plt_pos.y/8,
			20
		)
	)
end

function update_level_3()
	update_plate(plt3)
	foreach(turrets,update_turret)
	foreach(bullets,update_bullet)
end

function draw_level_3()
	draw_object(plt3)
	foreach(turrets,draw_bg_object)
	foreach(bullets,draw_bullet)
end
__gfx__
00000000666666668888999955555555555555556666666666666666655cccccccccc55666777766655555566555555666666666666666660000000000000000
00000000666666668999aaa9555dd555555555556666555555556666655cccccccccc5566733bb766500005665aaaa56665ddd66666666660000000000000000
00700700666666668999aaa955daad55555555556655555555555566655cccccccccc55667bb1476655555566555555665ddddd6666666660000000000000000
00077000666666669aa99aa85daaaad555555555665cccccccccc566655cccccccccc55667b44476651d1d56651d1d5665d677d6666666660000000000000000
000770006666666689aa99a866aaaa6655555555655cccccccccc556665cccccccccc56667b4b37665d1d15665d1d15665d777d6666666660000000000000000
0070070066666666899aa99866aaaa6666666666655cccccccccc5566655555555555566673bbb76655555566555555665ddddd6650000560000000000000000
00000000666666669a99aa986666666666666666655cccccccccc55666665555555566666555555664d44d4664d44d4665db1bd655555555088888800bbbbbb0
0000000066666666998899886666666666666666655cccccccccc55666666666666666665555555565d55d5665d55d5665d1b1d65dddd0d55555555555555555
666666555566666655555555555555556666665555666666666666666666666644444444444444444444444441ffff1466777766007777000077770000777700
66666655556666665555555555555555666666555566666666666666666666664555dd55aaadd55441a1111441ffff146733bb7607b3bb7007bb3b7007b3bb70
666666555566666655555555555555556666665555666666666666555566666645dd00d00ddd55d44a111114477dd77467bbbb7607bbbb70073bbb7007bbbb70
666666555566666655555555555555556666665555666666666666555566666645d858d8d8d55dd441a11114477dd77467bbbb76073bb37007bbbb70073bb370
66666655556666665555555555555555666666555566666666666655556666664dd85dd5d855dda441111114477dd67467bbb37607bbb37007bbb37007bbb370
666666555566666666666655556666666666665555666666666666555566666645558888855ddaa447711774477dd774673bbb7607bbbb7007bb3b7007bbbb70
666666555566666666666655556666666666666666666666666666555566666645ddd888555daaa4417ff7144871178465555556055555500555555005555550
666666555566666666666655556666666666666666666666666666555566666644444444444444444170f0144444444455555555555555555555555555555555
666a6666666aa66666a6a66666a66666666a6a660000000000000000666666660000000000007000000700000000000000777700007777000077770000777700
666aa66666a6a66666a66666666a6a66666a6a66000098080aaaa00066668666000070000705d507705d5070000700000733bb7007b3bb7007bb3b7007b3bb70
66a6a66666a66666666a6a66666a6a6666a6a66600080a80aa999aa06668d7660705d50700d585d00d585d00705d507007bb147007b14b7007314b7007b14b70
66a66666666a6a66666a6a6666a6a66666a6a66688898080a92249aa667dd76600d585d000d5c5d00d5c5d000d585d0007b444700734437007b44b7007344370
666a6a66666a6a6666a6a66666a6a666666a6a66899a0908a92449aa6685dd6600d5c5d00705d507705d50700d5c5d0007b4b3700744b37007b4b3700744b370
65aaaa5665aaaa5665aaaa5665aaaa5665aaaa5688980890a9999aa067555d760705d5070000700000070000705d5070073bbb7007bbbb7007b43b7007bbbb70
55555555555555555555555555555555555555550008a0a80aaaa00067055dd70000700000000000000000000007000005555550055555500555555005555550
5dddd0d55dddd0d55dddd0d55dddd0d55dddd0d500000000000000007000555d0000000000000000000000000000000055555555555555555555555555555555
00000000004440000044400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00444000001410000014100000444000004440000044400000444000004440000044400000044400000044400000000000000000000000000000000000000000
00141000004440000044400000141000001410000014100000141000001410000414140004014100004014100040444000000000000000000000000000000000
00444000077877000778770000444000004440000044400000444000404440400744470007744400007744400077141000404440000000000000000000000000
07787700077877400778774007787700077877000778770007787700777877700778770000487000000787700007444000071410000000000000000000000000
07787700047171000471710007487740074877000778770047787740007870000078700000787000007877700078470000784440000744000007440000074400
04717400001000000100000001717000017174000471740000717000007170000071700000717000077170400771770001717700017844400178444001784440
00101000000000000000000000000100000010000010100000101000001010000010100000101000010100000010100000001040178748401787484017874840
00000000004440000044400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0044400000b4b00000b4b00000444000004440000044400000444000004440000044400000044400000044400000000000000000000000000000000000000000
00b4b000004440000044400000b4b00000b4b00000b4b00000b4b00000b4b00004b4b400040b4b000040b4b00040444000000000000000000000000000000000
00444000033433000334330000444000004440000044400000444000404440400344430003344400003344400033b4b000404440000000000000000000000000
0334330003343340033433400334330003343300033433000334330033343330033433000044300000034330000344400003b4b0000000000000000000000000
03343300043134000431340003443340034433000334330043343340003430000034300000343000003433300034430000344440000344000003440000034400
04313400004000000400000004313000043134000431340000313000003130000031300000313000033130400331330004313300013844400138444001384440
00404000000000000000000000000400000040000040400000404000004040000040400000404000040400000040400000004040438348404383484043834840
0000000000000000000ddd000000ddd0000000000000000000000000000000000000000000000000000000000000000000000000000000004000000040000000
00000000004999000bd555d000bd555d0000ddd0000ddd0000000000000000000000000000000000000000000000000000000000000000003100000031000000
00404440049aaa90b355855d0b35585500bd555d0bd555d000000000000000000000000000000000000000000000000000000000000000008300000083000000
00771410049999900b55855000b558550b355855b355855000000000000000000000000000000000000000000000000000000000000000003830000038300000
00074440049aaa90000555000000555000b558550b55855000000000000000000000000000000000000000000000000000000000000000004440000044400000
00784700049999900000d5d000000d5d000055500005550000000000000000000000000000000000000000000000000000000000000000008440000084400000
07717700049aaa9000dd555d00dd555d0dddd55d0dd555d000000000000000000000000000000000000000000000000000000000000000004400000044000000
0010100004999990dd555555dd555555d5555555d555555d00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000004440000000000000000000000000000000000000000000000000000000000000000000000000000004040055555555
0044400000444000004440000044400004141400041414000000000000000000000000000000000000000000000000000000000000d550d50043134005555550
001410000014100000141000041414000744470007444700074447000000000000000000000000000000000000000000000000000d5555550033433007b3bb70
004440000044400040444040074447000778770007787700077877000778770000000000000000000000000000000000000000000d58855500334330073bbb70
077877000778770077787770077877000078700000787000007870000078700000787000000000000000000000000000000000000d5555550004440007bbbb70
0778770047787740007870000078700000717000007170000071700000717000007170000071700000000000000000000000000000d550d5000b4b0007bbb370
0471740000717000007170000071700000101000001010000010100000101000001010000010100000101000000000000000000000b3b0000004440007b3bb70
00101000001010000010100000101000000000000000000000000000000000000000000000000000000000000000000000000000000b00000000000000777700
6666666600000000000000000000000000000000000000000a000000a0000000000000000000000000000000000000000000000000000000000aa00055555555
666666660aaaa0000aaaa0000aaaa0000aaaa0000aaaa000aaaaa000aaaa0000aaa00000a000000000a0000000000000000000000000000000aaaa0005555550
66666666aa999aa0aa999aa0a9999aa0aa999aa0aa999aa0a9999a009999a000999a0000a9a00000a9000000a0000000000000000000000000a99a0007bbb370
66666666a92249aaa92449aaa92449aaa92449aaa92249aaa92249a092244aa09249a000a4900000a4900000a9000000a0000000000000000a9449a0073b4b70
66666666a92449aaa92249aaa92249aaa92249aaa92449aaa92449a092444a00929a0000a9a00000a9a00000a000000000000000000000000a9429a007444b70
60000006a9999aa0aa999aa0aa999aa0aa999aa0a9999aa0a9999a00a999a000a9a00000aa000000a00000000000000000000000000000000a9229a00741bb70
055555500aaaa0000aaaa0000aaaa0000aaaa0000aaaa000aaaaa000aaaa0000a0000000a00000000a0000000000000000000000000000000aa99aa007bb3370
6000000600000000000000000000000000000000000000000a000000a000000000000000000000000000000000000000000000000000000000aaaa0000777700
444444444444444444444444444444444444444441ffff146666666666666666655cccccccccc556000000000000000000000000000000000000000000000000
4c7c33cccc7cccc44555dd55aaadd55441a1111441ffff146666555555556666655cccccccccc556000000000000000000000000000000000000000000000000
473333ccc777cc7445dd00d00ddd55d44a111114477dd7746655555555555566655cccccccccc556000000000000000000000000000000000000000000000000
4c33333cccccc77445d858d8d8d55dd441a11114477dd774665cccccccccc566655cccccccccc556000000000000000000000000000000000000000000000000
4c8c4c8cccccccc44dd85dd5d855dda441111114477dd674655cccccccccc556665cccccccccc566000000000000000000000000000000000000000000000000
4ccc4cccccccccc445558888855ddaa447711774477dd774655cccccccccc5566655555555555566000000000000000000000000000000000000000000000000
4bbbbbbbbbbbbbb445ddd888555daaa4417ff71448711784655cccccccccc5566666555555556666000000000000000000000000000000000000000000000000
444444444444444444444444444444444170f01444444444655cccccccccc5566666666666666666000000000000000000000000000000000000000000000000
__gff__
0000018080000000002000000000000004020402828203030000000000000000404040404000000808080808202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1304030404040403040404040304040404030404040304040403040404030404040304040403040404030404040304040403040404030404040304040403040404030404040304040403040404030412000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1101010101010101010101010101010101010101010101010101010101010101010101010101808101010101010101010101010101010101010101010101010101010101010101010101010101010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1186870101840101018687010101010101868701010101010101010101868701010101010101010101010101010101010101010101050601010101010105060101010101010101010105060101018410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1188890101850101018889010101010101888901010101010101010101888901010170707001707070700170707001010101010101070801010101010107080101010101010101010107080101018510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1101010101010101010101010101010101010101010101010101010101010101010170010101010101010101010101010101010101010101828301010101010101010101010101010101010101010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11010a0c0a01011c0a01010a01010101010101010127270101012727010101010101010c2727272727272727272727270101010101272701010127270101010101090b01010101272727272727272010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1304030404040403040404040304121304030404040404121304040304040404121304040403040404030404040304040404030404040304040403040403040404030404121304040304041213040412000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1101010101010101010101010101101101010101010101101101010101010101101101010101010101010101010101010101010101010101010101010101010101010101101101010101011011010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1101010101010101010101010101101101010101010101101101010101010101101101010101010101010101010101010101010101010101010101010101010101010101101101011617011011010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1101010101010101010101010101101101010116170101141570011617010101101101010101010101010101010101010101010101010101010101707001010101010101101101011011011011010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1101018687010101018687010101101101700110110180810101011011010101101101018687010101840101018687010101868701010101010101010186870101840101101101701011011011868710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1101018889018283018889010101141501010110110101010101011011010101141501018889010101850101018889010101888901010170707001010188890101850101101101011011011011888910000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1101010101010101010101010101010170010110110101010170011011010101010101010101010101010101010101010101017070010101010101010101010101010101141570011011011415010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
110d01011c0a010101010a010101010101010110110c0127010101101127270101090b010127270101272701010101012701010101010127272701272727270101272701010101011011272727012010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1304030404040403041213040304040404041213040404040404040304040404030404040404040404040304040404030404040404040404040304040403040404040304040404040404040403040412000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1101010101010101011011010101010101011011010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1101010101010101011011010101010101011011010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1101010101010101011011010101161701011415700101010101010101010101010101010101010101010101010101010101010170010101700101017001010170010101010101010101010101010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11010101010101010110110170011011018081010101010101010101050601010101010101050601010101011a0101010101010101010101010101010101010101010101010101010101010101010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11010101010101010114150101011011010101010101010101010101070801011819010101070801010101011b0101010101707070707070707070707070707070707001010101010101010101010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1101010101010101010101700101101101010101700101010101010101010101010101010101010101010101010101010170010101010101010101010101010101010170010101010101010101010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
110d01011c0a0101010101010b0910110c012701010101010101010101010101010101010101010101010101010101017001010101272727272727270101272701010101010127272727272727012010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
011000000c0730060000000000000c0730c0730c073000000c0730000000000000000c0730000000000000000c07300000000000000000000000000c0730c0730c0730000000000000000c073000000c07300000
0110002000000000000c653000000000000000000000000000000000000c653000000000000000000000000000000000000c6530000000000000000c6530000000000000000c6530000000000000000c65300000
0110002400000000000c363000000000000000000000000000000000000c363000000000000000000000000000000000000c3630000000000000000c3630000000000000000c3630000000000000000c36300000
010100201057310573105730250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011000200c0350e0351003511035130350000000000000001303511035100350e0350c0350000000000000000c0350e0351003511035130350000000000000000c0350e035100351103513035000000000000000
01200020180501805018050180551d0501d0501d0501d0551a0501a0551c0501c055180501805018050180551c0501c0551d0551f0551d0501d0501d0501d0551a0501a0551c0501c05518050180551f0501f055
012000000074000742007420074504740047420474204745027400274202742027450574005742057420574500740007450274002745057400574205742057450474004742047420474500740007420074200745
012000203051034510355103451030510345103551034510305103551037510375103251034510325103051034510345103251032510345103251037510355103051035510375103751034515345153251030515
0120000010110101121011210115111101111211112111150c1100c1120c1120c1150e1100e1120e1120e11511110111121111211115131101311213112131150e1100e1120e1120e11510110101121011210115
012000003411234112341123411235112351123511235112301123011230112301123211234112301123011235112351123511235112371123711234112341123211232112321123211234112351123711237112
002000000007300000000000000000073000000000000000000730000000073000000007300000000730000000073000000000000000000730000000073000000007300000000000000000073000730007300000
010400202a5122a5112c5112e51131512375120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010400202a5122a5112c5112e51131512375123b1003b1003b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
012000001f4341f4351c4341c435184341843018430184351a4341a4351c4341a4341c4341c4351d4341d4351f4341f4301f4301f43518434184351c4341c4351a4341c4341d4341d4341c4341c4351f43418434
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000100000371004720077200b720117201a720347303f7303e70025700277002a7002d70031700367003b7003f700000000000000000000000000000000000000000000000000000000000000000000000000000
00010000376203762037620376203762036620366203562034620326202f6202c6202962026620236201e6101a610156100f6100d6100b6100a61006610056100460002600016000060000600006000060000600
000100000767007670076700767007660076600766007660076600766007660076600766008660096600d6601066013660196601e66024660286602d6503065032640346403664038630396303a6203a6203b610
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000200000f25010250122501525017250182501a2501d25020250212501735015350113500c350093500c4501d4502a4503345000000000000000000000000000000000000000000000000000000000000000000
000100002d1202d1202d1202c1202b120291202612023120201201d12019120121200b12006120021200000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000e7500f75010750117501275014750177501b7501f750277502e750337503575036750367503674036740367303672036710367103670036700367003670036700367000000000000000000000000000
0004000012550125501255012550125501835018350183501835018350183501c0501c0501c0501c0501655016550165501655016550165500000000000000000000000000000000000000000000000000000000
000400001a3301a3301a3301a3301a3301a3301533015330153301533015330153300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000200002d6602d6602d6502d6402d6302d6202d61000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000200000e6200e6300e6300e6400e6402a6402a6402a6402a6300463004630046100060004600001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100
000300000f3500f3500f3500f3500f3500f3402834028330283302833028330283201932019320193102332023320233202332035330353303532035310123201232012330123403c3503c3503c3503c3403c320
00010000030200202006030080300c0300f0401304019040210603d05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00010000050500e05014050170501a0501c0501d0501e0501f05020050200501f0501c0501405008050250502a0502f0503205035050390503a0503a0503a05039050360503405018050130500d0500805006050
__music__
03 00010203
01 04450647
01 04450607
01 04050607
02 04050647
01 08480a48
01 08480a0b
01 08090a0b
02 48090a4b

